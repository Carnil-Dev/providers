{"version":3,"sources":["../src/provider.ts","../src/index.ts"],"names":["Razorpay","createProviderError","CarnilError","Carnil"],"mappings":"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","file":"index.js","sourcesContent":["import Razorpay from 'razorpay';\nimport type {\n  Customer,\n  PaymentMethod,\n  PaymentIntent,\n  Subscription,\n  Invoice,\n  Refund,\n  Dispute,\n  CreateCustomerRequest,\n  UpdateCustomerRequest,\n  CreatePaymentIntentRequest,\n  CreateSubscriptionRequest,\n  CreateInvoiceRequest,\n  CreateRefundRequest,\n  CustomerListRequest,\n  PaymentIntentListRequest,\n  SubscriptionListRequest,\n  InvoiceListRequest,\n  WebhookEvent,\n  UsageMetrics,\n  AIUsageMetrics,\n  ProviderConfig,\n  ListPaymentMethodsParams,\n  ListRefundsParams,\n} from '@carnil/core';\n\nimport type { CarnilProvider } from '@carnil/core';\nimport { CarnilError, createProviderError } from '@carnil/core';\n\nexport class RazorpayProvider implements CarnilProvider {\n  public readonly name = 'razorpay';\n  public readonly version = '1.0.0';\n  public readonly config: ProviderConfig;\n  public readonly supportedFeatures = [\n    'customers',\n    'payments',\n    'subscriptions',\n    'invoices',\n    'refunds',\n    'disputes',\n    'webhooks',\n    'analytics',\n  ];\n  public readonly supportedCurrencies = [\n    'inr',\n    'usd',\n    'eur',\n    'gbp',\n    'aud',\n    'cad',\n    'sgd',\n    'hkd',\n    'jpy',\n    'aed',\n    'sar',\n    'qar',\n    'kwd',\n    'bhd',\n    'omr',\n    'jod',\n    'lbp',\n    'egp',\n    'try',\n    'rub',\n    'uah',\n    'byn',\n    'kzt',\n    'uzs',\n    'kgs',\n    'tjs',\n    'amd',\n    'azn',\n    'gel',\n    'mdl',\n    'bam',\n    'mkd',\n    'rsd',\n    'mnt',\n    'krw',\n    'twd',\n    'thb',\n    'vnd',\n    'idr',\n    'myr',\n    'php',\n    'lkr',\n    'bdt',\n    'pkr',\n    'afn',\n    'npr',\n    'btc',\n    'eth',\n    'ltc',\n  ];\n  public readonly supportedCountries = [\n    'IN',\n    'US',\n    'CA',\n    'GB',\n    'AU',\n    'AT',\n    'BE',\n    'BG',\n    'BR',\n    'CH',\n    'CY',\n    'CZ',\n    'DE',\n    'DK',\n    'EE',\n    'ES',\n    'FI',\n    'FR',\n    'GR',\n    'HR',\n    'HU',\n    'IE',\n    'IT',\n    'JP',\n    'LI',\n    'LT',\n    'LU',\n    'LV',\n    'MT',\n    'MX',\n    'MY',\n    'NL',\n    'NO',\n    'NZ',\n    'PL',\n    'PT',\n    'RO',\n    'SE',\n    'SG',\n    'SI',\n    'SK',\n    'TH',\n    'ID',\n    'PH',\n    'VN',\n    'KR',\n    'TW',\n    'HK',\n  ];\n\n  private razorpay: Razorpay;\n\n  constructor(config: ProviderConfig) {\n    this.config = config;\n    this.razorpay = new Razorpay({\n      key_id: config.apiKey,\n      key_secret: config.apiKey, // Razorpay uses key_secret for API key\n    });\n  }\n\n  // ========================================================================\n  // Base Provider Implementation\n  // ========================================================================\n\n  async healthCheck(): Promise<boolean> {\n    try {\n      await this.razorpay.payments.fetch('dummy'); // This will fail but we can check if the client is initialized\n      return true;\n    } catch (error) {\n      // If it's a 404, the client is working but the payment doesn't exist\n      return (error as any).statusCode === 404;\n    }\n  }\n\n  async verifyWebhook(payload: string, signature: string, secret: string): Promise<boolean> {\n    try {\n      const crypto = require('crypto');\n      const expectedSignature = crypto.createHmac('sha256', secret).update(payload).digest('hex');\n\n      return signature === expectedSignature;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async parseWebhook(payload: string, _signature: string, _secret: string): Promise<WebhookEvent> {\n    try {\n      const event = JSON.parse(payload);\n      return {\n        id: event.id || event.entity,\n        type: event.event,\n        data: event.payload || event,\n        created: new Date(event.created_at * 1000),\n        provider: 'razorpay',\n        livemode: !this.config.apiKey.startsWith('rzp_test_'),\n      };\n    } catch (error) {\n      throw createProviderError('razorpay', error, 'Webhook parsing failed');\n    }\n  }\n\n  // ========================================================================\n  // Customer Provider Implementation\n  // ========================================================================\n\n  async createCustomer(request: CreateCustomerRequest): Promise<Customer> {\n    try {\n      const customer = await this.razorpay.customers.create({\n        name: request.name,\n        email: request.email,\n        contact: request.phone,\n        notes: request.metadata,\n      });\n\n      return this.mapRazorpayCustomer(customer);\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async getCustomer(id: string): Promise<Customer> {\n    try {\n      const customer = await this.razorpay.customers.fetch(id);\n      return this.mapRazorpayCustomer(customer);\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async updateCustomer(id: string, request: UpdateCustomerRequest): Promise<Customer> {\n    try {\n      const customer = await this.razorpay.customers.edit(id, {\n        name: request.name,\n        email: request.email,\n        contact: request.phone,\n      });\n\n      return this.mapRazorpayCustomer(customer);\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async deleteCustomer(_id: string): Promise<void> {\n    try {\n      // Razorpay doesn't have a direct delete method for customers\n      // We'll mark them as inactive by updating their status\n      // Razorpay doesn't support customer deletion, so we'll just return success\n      // In a real implementation, you might want to mark the customer as inactive in your database\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async listCustomers(request?: CustomerListRequest): Promise<Customer[]> {\n    try {\n      const params: any = {\n        count: request?.limit || 10,\n      };\n\n      if (request?.startingAfter) {\n        params.from = request.startingAfter;\n      }\n\n      if (request?.endingBefore) {\n        params.to = request.endingBefore;\n      }\n\n      const customers = await this.razorpay.customers.all(params);\n\n      return customers.items.map(customer => this.mapRazorpayCustomer(customer));\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async listPaymentMethods(_params?: ListPaymentMethodsParams): Promise<PaymentMethod[]> {\n    try {\n      // Razorpay doesn't have a direct way to list payment methods for a customer\n      // We'll return an empty array for now\n      return [];\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async attachPaymentMethod(_customerId: string, _paymentMethodId: string): Promise<PaymentMethod> {\n    try {\n      // Razorpay doesn't have a direct way to attach payment methods\n      // This would typically be handled through their payment flow\n      throw new CarnilError('Not supported in Razorpay', 'NOT_SUPPORTED');\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async detachPaymentMethod(_paymentMethodId: string): Promise<void> {\n    try {\n      // Razorpay doesn't have a direct way to detach payment methods\n      throw new CarnilError('Not supported in Razorpay', 'NOT_SUPPORTED');\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async setDefaultPaymentMethod(\n    _customerId: string,\n    _paymentMethodId: string\n  ): Promise<PaymentMethod> {\n    try {\n      // Razorpay doesn't have a direct way to set default payment methods\n      throw new CarnilError('Not supported in Razorpay', 'NOT_SUPPORTED');\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  // ========================================================================\n  // Payment Provider Implementation\n  // ========================================================================\n\n  async createPaymentIntent(request: CreatePaymentIntentRequest): Promise<PaymentIntent> {\n    try {\n      // In Razorpay, we create an Order instead of a PaymentIntent\n      const order = await this.razorpay.orders.create({\n        amount: Math.round(request.amount * 100), // Convert to paise\n        currency: request.currency,\n        receipt: `receipt_${Date.now()}`,\n        notes: request.metadata,\n      });\n\n      return this.mapRazorpayOrder(order, request.customerId);\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async getPaymentIntent(id: string): Promise<PaymentIntent> {\n    try {\n      const order = await this.razorpay.orders.fetch(id);\n      return this.mapRazorpayOrder(order);\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async updatePaymentIntent(\n    _id: string,\n    _updates: Partial<CreatePaymentIntentRequest>\n  ): Promise<PaymentIntent> {\n    try {\n      // Razorpay orders cannot be updated once created\n      throw new CarnilError('Orders cannot be updated in Razorpay', 'NOT_SUPPORTED');\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async cancelPaymentIntent(_id: string): Promise<PaymentIntent> {\n    try {\n      // Razorpay orders cannot be cancelled once created\n      throw new CarnilError('Orders cannot be cancelled in Razorpay', 'NOT_SUPPORTED');\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async confirmPaymentIntent(id: string, _paymentMethodId?: string): Promise<PaymentIntent> {\n    try {\n      // In Razorpay, payment confirmation is handled on the frontend\n      // We'll return the order details for frontend integration\n      const order = await this.razorpay.orders.fetch(id);\n      return this.mapRazorpayOrder(order);\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async capturePaymentIntent(_id: string, _amount?: number): Promise<PaymentIntent> {\n    try {\n      // Razorpay doesn't have a separate capture step\n      throw new CarnilError('Not supported in Razorpay', 'NOT_SUPPORTED');\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  async listPaymentIntents(request?: PaymentIntentListRequest): Promise<PaymentIntent[]> {\n    try {\n      const params: any = {\n        count: request?.limit || 10,\n      };\n\n      if (request?.startingAfter) {\n        params.from = request.startingAfter;\n      }\n\n      if (request?.endingBefore) {\n        params.to = request.endingBefore;\n      }\n\n      const orders = await this.razorpay.orders.all(params);\n\n      return orders.items.map(order => this.mapRazorpayOrder(order));\n    } catch (error) {\n      throw createProviderError('razorpay', error);\n    }\n  }\n\n  // ========================================================================\n  // Mapping Functions\n  // ========================================================================\n\n  private mapRazorpayCustomer(customer: any): Customer {\n    return {\n      id: customer.id,\n      email: customer.email || undefined,\n      name: customer.name || undefined,\n      phone: customer.contact || undefined,\n      description: undefined,\n      metadata: customer.notes || {},\n      created: new Date(customer.created_at * 1000),\n      updated: new Date(customer.created_at * 1000), // Razorpay doesn't track updated time\n      deleted: customer.notes?.status === 'inactive',\n      provider: 'razorpay',\n      providerId: customer.id,\n    };\n  }\n\n  private mapRazorpayOrder(order: any, customerId?: string): PaymentIntent {\n    return {\n      id: order.id,\n      customerId: customerId || '',\n      amount: order.amount / 100, // Convert from paise\n      currency: order.currency,\n      status: this.mapRazorpayOrderStatus(order.status),\n      clientSecret: order.id, // In Razorpay, the order ID is used for frontend integration\n      description: order.receipt || undefined,\n      metadata: order.notes || {},\n      paymentMethodId: undefined,\n      receiptEmail: undefined,\n      created: new Date(order.created_at * 1000),\n      updated: new Date(order.created_at * 1000),\n      provider: 'razorpay',\n      providerId: order.id,\n    };\n  }\n\n  private mapRazorpayOrderStatus(status: string): PaymentIntent['status'] {\n    switch (status) {\n      case 'created':\n        return 'requires_payment_method';\n      case 'attempted':\n        return 'processing';\n      case 'paid':\n        return 'succeeded';\n      case 'failed':\n        return 'failed';\n      default:\n        return 'requires_payment_method';\n    }\n  }\n\n  // ========================================================================\n  // Placeholder implementations for remaining interfaces\n  // ========================================================================\n\n  async createSubscription(_request: CreateSubscriptionRequest): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getSubscription(_id: string): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateSubscription(\n    _id: string,\n    _updates: Partial<CreateSubscriptionRequest>\n  ): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async cancelSubscription(_id: string, _immediately?: boolean): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listSubscriptions(_request?: SubscriptionListRequest): Promise<Subscription[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async createInvoice(_request: CreateInvoiceRequest): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getInvoice(_id: string): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateInvoice(_id: string, _updates: Partial<CreateInvoiceRequest>): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async finalizeInvoice(_id: string): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async payInvoice(_id: string, _paymentMethodId?: string): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listInvoices(_request?: InvoiceListRequest): Promise<Invoice[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async createRefund(_request: CreateRefundRequest): Promise<Refund> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getRefund(_id: string): Promise<Refund> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listRefunds(_params?: ListRefundsParams): Promise<Refund[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getDispute(_id: string): Promise<Dispute> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listDisputes(): Promise<Dispute[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateDispute(_id: string, _evidence: any): Promise<Dispute> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async trackUsage(_metrics: UsageMetrics): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async trackAIUsage(_metrics: AIUsageMetrics): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getUsageMetrics(\n    _customerId: string,\n    _featureId: string,\n    _period: string\n  ): Promise<UsageMetrics[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getAIUsageMetrics(\n    _customerId: string,\n    _modelId?: string,\n    _period?: string\n  ): Promise<AIUsageMetrics[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async configure(_options: Record<string, any>): Promise<void> {\n    // Razorpay configuration is handled in constructor\n  }\n\n  async batchCreateCustomers(_requests: CreateCustomerRequest[]): Promise<Customer[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async batchCreatePaymentIntents(\n    _requests: CreatePaymentIntentRequest[]\n  ): Promise<PaymentIntent[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async createWebhookEndpoint(_url: string, _events: string[]): Promise<string> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateWebhookEndpoint(_id: string, _url: string, _events: string[]): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async deleteWebhookEndpoint(_id: string): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listWebhookEndpoints(): Promise<any[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  // Missing interface methods\n  async init(): Promise<void> {\n    // Razorpay initialization is done in constructor\n  }\n\n  async retrieveCustomer(_params: any): Promise<Customer> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async createPaymentMethod(_params: any): Promise<PaymentMethod> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrievePaymentMethod(_params: any): Promise<PaymentMethod> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updatePaymentMethod(_id: string, _updates: any): Promise<PaymentMethod> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async deletePaymentMethod(_id: string): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrievePaymentIntent(_params: any): Promise<PaymentIntent> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveSubscription(_params: any): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveInvoice(_params: any): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveRefund(_params: any): Promise<Refund> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveDispute(_params: any): Promise<Dispute> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  // Product management methods\n  async createProduct(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveProduct(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateProduct(_id: string, _updates: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listProducts(_params?: any): Promise<any[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async deleteProduct(_id: string): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  // Price management methods\n  async createPrice(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrievePrice(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updatePrice(_id: string, _updates: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listPrices(_params?: any): Promise<any[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n}\n","// ============================================================================\n// Razorpay Provider for Carnil Payments SDK\n// ============================================================================\n\nexport { RazorpayProvider } from './provider';\n\n// Re-export core types for convenience\nexport type {\n  Customer,\n  PaymentMethod,\n  PaymentIntent,\n  Subscription,\n  Invoice,\n  Refund,\n  Dispute,\n  CreateCustomerRequest,\n  UpdateCustomerRequest,\n  CreatePaymentIntentRequest,\n  CreateSubscriptionRequest,\n  CreateInvoiceRequest,\n  CreateRefundRequest,\n  CustomerListRequest,\n  PaymentIntentListRequest,\n  SubscriptionListRequest,\n  InvoiceListRequest,\n  ListResponse,\n  WebhookEvent,\n  UsageMetrics,\n  AIUsageMetrics,\n} from '@carnil/core';\n\nimport type { ProviderConfig } from '@carnil/core';\n\n// Provider factory function\nexport function createRazorpayProvider(config: ProviderConfig) {\n  return new RazorpayProvider(config);\n}\n\n// Register provider with Carnil\nimport { Carnil } from '@carnil/core';\nimport { RazorpayProvider } from './provider';\n\nCarnil.registerProvider('razorpay', {\n  create: (config: ProviderConfig) => new RazorpayProvider(config),\n});\n"]}