import { CarnilProvider, ProviderConfig, WebhookEvent, CreateCustomerRequest, Customer, UpdateCustomerRequest, CustomerListRequest, ListPaymentMethodsParams, PaymentMethod, CreatePaymentIntentRequest, PaymentIntent, PaymentIntentListRequest, CreateSubscriptionRequest, Subscription, SubscriptionListRequest, CreateInvoiceRequest, Invoice, InvoiceListRequest, CreateRefundRequest, Refund, ListRefundsParams, Dispute, UsageMetrics, AIUsageMetrics } from '@carnil/core';
export { AIUsageMetrics, CreateCustomerRequest, CreateInvoiceRequest, CreatePaymentIntentRequest, CreateRefundRequest, CreateSubscriptionRequest, Customer, CustomerListRequest, Dispute, Invoice, InvoiceListRequest, ListResponse, PaymentIntent, PaymentIntentListRequest, PaymentMethod, Refund, Subscription, SubscriptionListRequest, UpdateCustomerRequest, UsageMetrics, WebhookEvent } from '@carnil/core';

declare class RazorpayProvider implements CarnilProvider {
    readonly name = "razorpay";
    readonly version = "1.0.0";
    readonly config: ProviderConfig;
    readonly supportedFeatures: string[];
    readonly supportedCurrencies: string[];
    readonly supportedCountries: string[];
    private razorpay;
    constructor(config: ProviderConfig);
    healthCheck(): Promise<boolean>;
    verifyWebhook(payload: string, signature: string, secret: string): Promise<boolean>;
    parseWebhook(payload: string, _signature: string, _secret: string): Promise<WebhookEvent>;
    createCustomer(request: CreateCustomerRequest): Promise<Customer>;
    getCustomer(id: string): Promise<Customer>;
    updateCustomer(id: string, request: UpdateCustomerRequest): Promise<Customer>;
    deleteCustomer(_id: string): Promise<void>;
    listCustomers(request?: CustomerListRequest): Promise<Customer[]>;
    listPaymentMethods(_params?: ListPaymentMethodsParams): Promise<PaymentMethod[]>;
    attachPaymentMethod(_customerId: string, _paymentMethodId: string): Promise<PaymentMethod>;
    detachPaymentMethod(_paymentMethodId: string): Promise<void>;
    setDefaultPaymentMethod(_customerId: string, _paymentMethodId: string): Promise<PaymentMethod>;
    createPaymentIntent(request: CreatePaymentIntentRequest): Promise<PaymentIntent>;
    getPaymentIntent(id: string): Promise<PaymentIntent>;
    updatePaymentIntent(_id: string, _updates: Partial<CreatePaymentIntentRequest>): Promise<PaymentIntent>;
    cancelPaymentIntent(_id: string): Promise<PaymentIntent>;
    confirmPaymentIntent(id: string, _paymentMethodId?: string): Promise<PaymentIntent>;
    capturePaymentIntent(_id: string, _amount?: number): Promise<PaymentIntent>;
    listPaymentIntents(request?: PaymentIntentListRequest): Promise<PaymentIntent[]>;
    private mapRazorpayCustomer;
    private mapRazorpayOrder;
    private mapRazorpayOrderStatus;
    createSubscription(_request: CreateSubscriptionRequest): Promise<Subscription>;
    getSubscription(_id: string): Promise<Subscription>;
    updateSubscription(_id: string, _updates: Partial<CreateSubscriptionRequest>): Promise<Subscription>;
    cancelSubscription(_id: string, _immediately?: boolean): Promise<Subscription>;
    listSubscriptions(_request?: SubscriptionListRequest): Promise<Subscription[]>;
    createInvoice(_request: CreateInvoiceRequest): Promise<Invoice>;
    getInvoice(_id: string): Promise<Invoice>;
    updateInvoice(_id: string, _updates: Partial<CreateInvoiceRequest>): Promise<Invoice>;
    finalizeInvoice(_id: string): Promise<Invoice>;
    payInvoice(_id: string, _paymentMethodId?: string): Promise<Invoice>;
    listInvoices(_request?: InvoiceListRequest): Promise<Invoice[]>;
    createRefund(_request: CreateRefundRequest): Promise<Refund>;
    getRefund(_id: string): Promise<Refund>;
    listRefunds(_params?: ListRefundsParams): Promise<Refund[]>;
    getDispute(_id: string): Promise<Dispute>;
    listDisputes(): Promise<Dispute[]>;
    updateDispute(_id: string, _evidence: any): Promise<Dispute>;
    trackUsage(_metrics: UsageMetrics): Promise<void>;
    trackAIUsage(_metrics: AIUsageMetrics): Promise<void>;
    getUsageMetrics(_customerId: string, _featureId: string, _period: string): Promise<UsageMetrics[]>;
    getAIUsageMetrics(_customerId: string, _modelId?: string, _period?: string): Promise<AIUsageMetrics[]>;
    configure(_options: Record<string, any>): Promise<void>;
    batchCreateCustomers(_requests: CreateCustomerRequest[]): Promise<Customer[]>;
    batchCreatePaymentIntents(_requests: CreatePaymentIntentRequest[]): Promise<PaymentIntent[]>;
    createWebhookEndpoint(_url: string, _events: string[]): Promise<string>;
    updateWebhookEndpoint(_id: string, _url: string, _events: string[]): Promise<void>;
    deleteWebhookEndpoint(_id: string): Promise<void>;
    listWebhookEndpoints(): Promise<any[]>;
    init(): Promise<void>;
    retrieveCustomer(_params: any): Promise<Customer>;
    createPaymentMethod(_params: any): Promise<PaymentMethod>;
    retrievePaymentMethod(_params: any): Promise<PaymentMethod>;
    updatePaymentMethod(_id: string, _updates: any): Promise<PaymentMethod>;
    deletePaymentMethod(_id: string): Promise<void>;
    retrievePaymentIntent(_params: any): Promise<PaymentIntent>;
    retrieveSubscription(_params: any): Promise<Subscription>;
    retrieveInvoice(_params: any): Promise<Invoice>;
    retrieveRefund(_params: any): Promise<Refund>;
    retrieveDispute(_params: any): Promise<Dispute>;
    createProduct(_params: any): Promise<any>;
    retrieveProduct(_params: any): Promise<any>;
    updateProduct(_id: string, _updates: any): Promise<any>;
    listProducts(_params?: any): Promise<any[]>;
    deleteProduct(_id: string): Promise<void>;
    createPrice(_params: any): Promise<any>;
    retrievePrice(_params: any): Promise<any>;
    updatePrice(_id: string, _updates: any): Promise<any>;
    listPrices(_params?: any): Promise<any[]>;
}

declare function createRazorpayProvider(config: ProviderConfig): RazorpayProvider;

export { RazorpayProvider, createRazorpayProvider };
