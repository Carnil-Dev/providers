{"version":3,"sources":["../src/provider.ts","../src/index.ts"],"names":["Stripe","createProviderError","CarnilError","Carnil"],"mappings":"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","file":"index.js","sourcesContent":["import Stripe from 'stripe';\nimport type {\n  Customer,\n  PaymentMethod,\n  PaymentIntent,\n  Subscription,\n  Invoice,\n  Refund,\n  Dispute,\n  CreateCustomerRequest,\n  UpdateCustomerRequest,\n  CreatePaymentIntentRequest,\n  WebhookEvent,\n  UsageMetrics,\n  AIUsageMetrics,\n  ProviderConfig,\n} from '@carnil/core';\n\nimport type { CarnilProvider } from '@carnil/core';\nimport { CarnilError, createProviderError } from '@carnil/core';\n\nexport class StripeProvider implements CarnilProvider {\n  public readonly name = 'stripe';\n  public readonly version = '1.0.0';\n  public readonly config: ProviderConfig;\n  public readonly supportedFeatures = [\n    'customers',\n    'payments',\n    'subscriptions',\n    'invoices',\n    'refunds',\n    'disputes',\n    'webhooks',\n    'analytics',\n  ];\n  public readonly supportedCurrencies = [\n    'usd',\n    'eur',\n    'gbp',\n    'cad',\n    'aud',\n    'jpy',\n    'chf',\n    'sek',\n    'nok',\n    'dkk',\n    'pln',\n    'czk',\n    'huf',\n    'bgn',\n    'hrk',\n    'ron',\n    'try',\n    'rub',\n    'uah',\n    'byn',\n    'kzt',\n    'uzs',\n    'kgs',\n    'tjs',\n    'amd',\n    'azn',\n    'gel',\n    'mdl',\n    'bam',\n    'mkd',\n    'rsd',\n    'mnt',\n    'krw',\n    'sgd',\n    'hkd',\n    'twd',\n    'thb',\n    'vnd',\n    'idr',\n    'myr',\n    'php',\n    'inr',\n    'lkr',\n    'bdt',\n    'pkr',\n    'afn',\n    'npr',\n    'btc',\n    'eth',\n    'ltc',\n  ];\n  public readonly supportedCountries = [\n    'US',\n    'CA',\n    'GB',\n    'AU',\n    'AT',\n    'BE',\n    'BG',\n    'BR',\n    'CH',\n    'CY',\n    'CZ',\n    'DE',\n    'DK',\n    'EE',\n    'ES',\n    'FI',\n    'FR',\n    'GR',\n    'HR',\n    'HU',\n    'IE',\n    'IT',\n    'JP',\n    'LI',\n    'LT',\n    'LU',\n    'LV',\n    'MT',\n    'MX',\n    'MY',\n    'NL',\n    'NO',\n    'NZ',\n    'PL',\n    'PT',\n    'RO',\n    'SE',\n    'SG',\n    'SI',\n    'SK',\n    'TH',\n    'IN',\n    'ID',\n    'PH',\n    'VN',\n    'KR',\n    'TW',\n    'HK',\n  ];\n\n  private stripe: Stripe;\n\n  constructor(config: ProviderConfig) {\n    this.config = config;\n    this.stripe = new Stripe(config.apiKey, {\n      apiVersion: '2023-10-16',\n      timeout: config.timeout || 30000,\n      maxNetworkRetries: config.retries || 3,\n    });\n  }\n\n  // ========================================================================\n  // Base Provider Implementation\n  // ========================================================================\n\n  async init(_config: Record<string, any>): Promise<void> {\n    // Initialization is handled in constructor\n  }\n\n  async healthCheck(): Promise<boolean> {\n    try {\n      await this.stripe.balance.retrieve();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async verifyWebhook(payload: string, signature: string, secret: string): Promise<boolean> {\n    try {\n      this.stripe.webhooks.constructEvent(payload, signature, secret);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async parseWebhook(payload: string, signature: string, secret: string): Promise<WebhookEvent> {\n    try {\n      const event = this.stripe.webhooks.constructEvent(payload, signature, secret);\n      return {\n        id: event.id,\n        type: event.type,\n        data: event.data,\n        created: new Date(event.created * 1000),\n        provider: 'stripe',\n        livemode: event.livemode,\n      };\n    } catch (error) {\n      throw createProviderError('stripe', error, 'Webhook parsing failed');\n    }\n  }\n\n  // ========================================================================\n  // Customer Provider Implementation\n  // ========================================================================\n\n  async createCustomer(request: CreateCustomerRequest): Promise<Customer> {\n    try {\n      const customer = await this.stripe.customers.create({\n        email: request.email,\n        name: request.name,\n        phone: request.phone,\n        description: request.description,\n        metadata: request.metadata,\n      });\n\n      return this.mapStripeCustomer(customer);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async retrieveCustomer(_params: any): Promise<Customer> {\n    return this.getCustomer(_params.id || _params);\n  }\n\n  async getCustomer(id: string): Promise<Customer> {\n    try {\n      const customer = await this.stripe.customers.retrieve(id);\n      if (customer.deleted) {\n        throw new CarnilError('Customer not found', 'NOT_FOUND', 'NOT_FOUND', 404);\n      }\n      return this.mapStripeCustomer(customer as Stripe.Customer);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async updateCustomer(id: string, request: UpdateCustomerRequest): Promise<Customer> {\n    try {\n      const customer = await this.stripe.customers.update(id, {\n        email: request.email,\n        name: request.name,\n        phone: request.phone,\n        description: request.description,\n        metadata: request.metadata,\n      });\n\n      return this.mapStripeCustomer(customer);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    try {\n      await this.stripe.customers.del(id);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async listCustomers(_request?: any): Promise<Customer[]> {\n    try {\n      const params: Stripe.CustomerListParams = {\n        limit: _request?.limit || 10,\n        starting_after: _request?.startingAfter,\n        ending_before: _request?.endingBefore,\n      };\n\n      if (_request?.email) {\n        params.email = _request.email;\n      }\n\n      if (_request?.created) {\n        params.created = {\n          gte: _request.created.gte?.getTime() / 1000,\n          lte: _request.created.lte?.getTime() / 1000,\n        };\n      }\n\n      const customers = await this.stripe.customers.list(params);\n\n      return customers.data.map(customer => this.mapStripeCustomer(customer));\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async createPaymentMethod(_params: any): Promise<PaymentMethod> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrievePaymentMethod(_params: any): Promise<PaymentMethod> {\n    try {\n      const paymentMethod = await this.stripe.paymentMethods.retrieve(_params.id || _params);\n      return this.mapStripePaymentMethod(paymentMethod);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async updatePaymentMethod(_id: string, _params: any): Promise<PaymentMethod> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async deletePaymentMethod(paymentMethodId: string): Promise<void> {\n    await this.detachPaymentMethod(paymentMethodId);\n  }\n\n  async listPaymentMethods(_params?: any): Promise<PaymentMethod[]> {\n    try {\n      const customerId = _params?.customerId || _params?.customer || _params;\n      const paymentMethods = await this.stripe.paymentMethods.list({\n        customer: customerId,\n        type: 'card',\n      });\n\n      return paymentMethods.data.map(pm => this.mapStripePaymentMethod(pm));\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async attachPaymentMethod(customerId: string, paymentMethodId: string): Promise<PaymentMethod> {\n    try {\n      const paymentMethod = await this.stripe.paymentMethods.attach(paymentMethodId, {\n        customer: customerId,\n      });\n\n      return this.mapStripePaymentMethod(paymentMethod);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async detachPaymentMethod(paymentMethodId: string): Promise<void> {\n    try {\n      await this.stripe.paymentMethods.detach(paymentMethodId);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async setDefaultPaymentMethod(\n    customerId: string,\n    paymentMethodId: string\n  ): Promise<PaymentMethod> {\n    try {\n      await this.stripe.customers.update(customerId, {\n        invoice_settings: {\n          default_payment_method: paymentMethodId,\n        },\n      });\n\n      const paymentMethod = await this.stripe.paymentMethods.retrieve(paymentMethodId);\n      return this.mapStripePaymentMethod(paymentMethod);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  // ========================================================================\n  // Product Provider Implementation\n  // ========================================================================\n\n  async createProduct(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveProduct(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateProduct(_id: string, _params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listProducts(_params?: any): Promise<any[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  // ========================================================================\n  // Price Provider Implementation\n  // ========================================================================\n\n  async createPrice(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrievePrice(_params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updatePrice(_id: string, _params: any): Promise<any> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listPrices(_params?: any): Promise<any[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  // ========================================================================\n  // Payment Provider Implementation\n  // ========================================================================\n\n  async createPaymentIntent(request: CreatePaymentIntentRequest): Promise<PaymentIntent> {\n    try {\n      const paymentIntent = await this.stripe.paymentIntents.create({\n        amount: Math.round(request.amount * 100), // Convert to cents\n        currency: request.currency,\n        customer: request.customerId,\n        description: request.description,\n        metadata: request.metadata,\n        payment_method: request.paymentMethodId,\n        receipt_email: request.receiptEmail,\n        capture_method: request.captureMethod,\n      });\n\n      return this.mapStripePaymentIntent(paymentIntent);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async retrievePaymentIntent(_params: any): Promise<PaymentIntent> {\n    return this.getPaymentIntent(_params.id || _params);\n  }\n\n  async getPaymentIntent(id: string): Promise<PaymentIntent> {\n    try {\n      const paymentIntent = await this.stripe.paymentIntents.retrieve(id);\n      return this.mapStripePaymentIntent(paymentIntent);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async updatePaymentIntent(\n    id: string,\n    updates: Partial<CreatePaymentIntentRequest>\n  ): Promise<PaymentIntent> {\n    try {\n      const paymentIntent = await this.stripe.paymentIntents.update(id, {\n        amount: updates.amount ? Math.round(updates.amount * 100) : undefined,\n        currency: updates.currency,\n        description: updates.description,\n        metadata: updates.metadata,\n        payment_method: updates.paymentMethodId,\n        receipt_email: updates.receiptEmail,\n      });\n\n      return this.mapStripePaymentIntent(paymentIntent);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async cancelPaymentIntent(id: string): Promise<PaymentIntent> {\n    try {\n      const paymentIntent = await this.stripe.paymentIntents.cancel(id);\n      return this.mapStripePaymentIntent(paymentIntent);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async confirmPaymentIntent(id: string, paymentMethodId?: string): Promise<PaymentIntent> {\n    try {\n      const paymentIntent = await this.stripe.paymentIntents.confirm(id, {\n        payment_method: paymentMethodId,\n      });\n\n      return this.mapStripePaymentIntent(paymentIntent);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async capturePaymentIntent(id: string, amount?: number): Promise<PaymentIntent> {\n    try {\n      const paymentIntent = await this.stripe.paymentIntents.capture(id, {\n        amount_to_capture: amount ? Math.round(amount * 100) : undefined,\n      });\n\n      return this.mapStripePaymentIntent(paymentIntent);\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  async listPaymentIntents(_request?: any): Promise<PaymentIntent[]> {\n    try {\n      const params: Stripe.PaymentIntentListParams = {\n        limit: _request?.limit || 10,\n        starting_after: _request?.startingAfter,\n        ending_before: _request?.endingBefore,\n        customer: _request?.customerId,\n      };\n\n      if (_request?.created) {\n        params.created = {\n          gte: _request.created.gte?.getTime() / 1000,\n          lte: _request.created.lte?.getTime() / 1000,\n        };\n      }\n\n      const paymentIntents = await this.stripe.paymentIntents.list(params);\n\n      return paymentIntents.data.map(pi => this.mapStripePaymentIntent(pi));\n    } catch (error) {\n      throw createProviderError('stripe', error);\n    }\n  }\n\n  // ========================================================================\n  // Mapping Functions\n  // ========================================================================\n\n  private mapStripeCustomer(customer: Stripe.Customer): Customer {\n    return {\n      id: customer.id,\n      email: customer.email || undefined,\n      name: customer.name || undefined,\n      phone: customer.phone || undefined,\n      description: customer.description || undefined,\n      metadata: customer.metadata,\n      created: new Date(customer.created * 1000),\n      updated: new Date(customer.created * 1000), // Stripe doesn't track updated time\n      deleted: customer.deleted || false,\n      provider: 'stripe',\n      providerId: customer.id,\n    };\n  }\n\n  private mapStripePaymentMethod(paymentMethod: Stripe.PaymentMethod): PaymentMethod {\n    const card = paymentMethod.card;\n    return {\n      id: paymentMethod.id,\n      customerId: paymentMethod.customer as string,\n      type: 'card',\n      brand: card?.brand,\n      last4: card?.last4,\n      expiryMonth: card?.exp_month,\n      expiryYear: card?.exp_year,\n      isDefault: false, // Would need to check customer's default payment method\n      metadata: paymentMethod.metadata || undefined,\n      created: new Date(paymentMethod.created * 1000),\n      updated: new Date(paymentMethod.created * 1000),\n      provider: 'stripe',\n      providerId: paymentMethod.id,\n    };\n  }\n\n  private mapStripePaymentIntent(paymentIntent: Stripe.PaymentIntent): PaymentIntent {\n    return {\n      id: paymentIntent.id,\n      customerId: paymentIntent.customer as string,\n      amount: paymentIntent.amount / 100, // Convert from cents\n      currency: paymentIntent.currency,\n      status: paymentIntent.status as any,\n      clientSecret: paymentIntent.client_secret || undefined,\n      description: paymentIntent.description || undefined,\n      metadata: paymentIntent.metadata || undefined,\n      paymentMethodId: (paymentIntent.payment_method as string) || undefined,\n      receiptEmail: paymentIntent.receipt_email || undefined,\n      created: new Date(paymentIntent.created * 1000),\n      updated: new Date(paymentIntent.created * 1000),\n      provider: 'stripe',\n      providerId: paymentIntent.id,\n    };\n  }\n\n  // ========================================================================\n  // Placeholder implementations for remaining interfaces\n  // ========================================================================\n\n  async createSubscription(_request: any): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveSubscription(_params: any): Promise<Subscription> {\n    return this.getSubscription(_params.id || _params);\n  }\n\n  async getSubscription(_id: string): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateSubscription(_id: string, _updates: any): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async cancelSubscription(_id: string): Promise<Subscription> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listSubscriptions(_request?: any): Promise<Subscription[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async createInvoice(_request: any): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveInvoice(_params: any): Promise<Invoice> {\n    return this.getInvoice(_params.id || _params);\n  }\n\n  async getInvoice(_id: string): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateInvoice(_id: string, _updates: any): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async finalizeInvoice(_id: string): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async payInvoice(_id: string, _paymentMethodId?: string): Promise<Invoice> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listInvoices(_request?: any): Promise<Invoice[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async createRefund(_request: any): Promise<Refund> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveRefund(_params: any): Promise<Refund> {\n    return this.getRefund(_params.id || _params);\n  }\n\n  async getRefund(_id: string): Promise<Refund> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listRefunds(_params?: any): Promise<Refund[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async retrieveDispute(_params: any): Promise<Dispute> {\n    return this.getDispute(_params.id || _params);\n  }\n\n  async getDispute(_id: string): Promise<Dispute> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listDisputes(_params?: any): Promise<Dispute[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateDispute(_id: string, _evidence: any): Promise<Dispute> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async trackUsage(_metrics: UsageMetrics): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async trackAIUsage(_metrics: AIUsageMetrics): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getUsageMetrics(\n    _customerId: string,\n    _featureId: string,\n    _period: string\n  ): Promise<UsageMetrics[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async getAIUsageMetrics(\n    _customerId: string,\n    _modelId?: string,\n    _period?: string\n  ): Promise<AIUsageMetrics[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async configure(_options: Record<string, any>): Promise<void> {\n    // Stripe configuration is handled in constructor\n  }\n\n  async batchCreateCustomers(_requests: CreateCustomerRequest[]): Promise<Customer[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async batchCreatePaymentIntents(\n    _requests: CreatePaymentIntentRequest[]\n  ): Promise<PaymentIntent[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async createWebhookEndpoint(_url: string, _events: string[]): Promise<string> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async updateWebhookEndpoint(_id: string, _url: string, _events: string[]): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async deleteWebhookEndpoint(_id: string): Promise<void> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n\n  async listWebhookEndpoints(): Promise<any[]> {\n    throw new CarnilError('Not implemented', 'NOT_IMPLEMENTED');\n  }\n}\n","// ============================================================================\n// Stripe Provider for Carnil Payments SDK\n// ============================================================================\n\nexport { StripeProvider } from './provider';\n\n// Re-export core types for convenience\nexport type {\n  Customer,\n  PaymentMethod,\n  PaymentIntent,\n  Subscription,\n  Invoice,\n  Refund,\n  Dispute,\n  CreateCustomerRequest,\n  UpdateCustomerRequest,\n  CreatePaymentIntentRequest,\n  CreateSubscriptionRequest,\n  CreateInvoiceRequest,\n  CreateRefundRequest,\n  CustomerListRequest,\n  PaymentIntentListRequest,\n  SubscriptionListRequest,\n  InvoiceListRequest,\n  ListResponse,\n  WebhookEvent,\n  UsageMetrics,\n  AIUsageMetrics,\n} from '@carnil/core';\n\n// Import ProviderConfig separately\nimport type { ProviderConfig } from '@carnil/core';\n\n// Provider factory function\nexport function createStripeProvider(config: ProviderConfig) {\n  return new StripeProvider(config);\n}\n\n// Register provider with Carnil\nimport { Carnil } from '@carnil/core';\nimport { StripeProvider } from './provider';\n\nCarnil.registerProvider('stripe', {\n  create: (config: ProviderConfig) => new StripeProvider(config),\n});\n"]}